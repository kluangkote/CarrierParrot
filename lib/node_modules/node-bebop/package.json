{
  "_args": [
    [
      "https://github.com/hybridgroup/node-bebop/tarball/master",
      "/Users/nelsonliu/Documents/Github/CarrierParrot/lib"
    ]
  ],
  "_from": "https://github.com/hybridgroup/node-bebop/tarball/master",
  "_id": "node-bebop@0.3.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/node-bebop",
  "_phantomChildren": {},
  "_requested": {
    "name": null,
    "raw": "https://github.com/hybridgroup/node-bebop/tarball/master",
    "rawSpec": "https://github.com/hybridgroup/node-bebop/tarball/master",
    "scope": null,
    "spec": "https://github.com/hybridgroup/node-bebop/tarball/master",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://github.com/hybridgroup/node-bebop/tarball/master",
  "_shasum": "6a3edd29db9092dcfce9c94187f7a3a09eab50c7",
  "_shrinkwrap": null,
  "_spec": "https://github.com/hybridgroup/node-bebop/tarball/master",
  "_where": "/Users/nelsonliu/Documents/Github/CarrierParrot/lib",
  "author": {
    "email": "cylonjs@hybridgroup.com",
    "name": "The Hybrid Group"
  },
  "bugs": {
    "url": "https://github.com/hybridgroup/node-bebop/issues"
  },
  "dependencies": {
    "fluent-ffmpeg": "^2.0.1",
    "storotype": "^0.1.17",
    "through": "^2.3.7"
  },
  "description": "library for the parrot bebop",
  "devDependencies": {
    "chai": "^2.3.0",
    "grunt": "^0.4.5",
    "grunt-eslint": "^13.0.0",
    "grunt-simple-mocha": "^0.4.0",
    "mocha": "^2.2.5",
    "promise": "^7.1.1",
    "request": "^2.69.0",
    "sinon": "^1.14.1",
    "xml2json": "^0.9.0"
  },
  "homepage": "https://github.com/hybridgroup/node-bebop",
  "keywords": [
    "bebop",
    "drone",
    "parrot"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "node-bebop",
  "optionalDependencies": {},
  "readme": "# node-bebop\n[![Build Status](https://travis-ci.org/hybridgroup/node-bebop.svg?branch=master)](https://travis-ci.org/hybridgroup/node-bebop)\n[![Test Coverage](https://codeclimate.com/github/hybridgroup/node-bebop/badges/coverage.svg)](https://codeclimate.com/github/hybridgroup/node-bebop/coverage)  \n\nControl your Parrot Bebop drone using JavaScript!\n\nThis module allows you to control, receive nav data, and receive video data from the [Parrot Bebop](http://www.parrot.com/products/bebop-drone/) WiFi controlled drone.\n\nThe implementation attempts to use the same interface as the [node-ar-drone](https://github.com/felixge/node-ar-drone) node module from [@felixge](https://github.com/felixge/) and [@rmehner](https://github.com/rmehner), so it can be mostly NodeCopter compatible.\n\n## How to Install\n\nTo get started, install the npm module:\n\n    $ npm install node-bebop\n\n\n## How to Use\n\nThis simple example takes off, then lands after 5 seconds:\n\n```javascript\nvar bebop = require('node-bebop');\n\nvar drone = bebop.createClient();\n\ndrone.connect(function() {\n  drone.takeOff();\n\n  setTimeout(function() {\n    drone.land();\n  }, 5000);\n});\n\n```\n### API\n\n### createClient()\n\nReturns a `new Bebop`\n\n### connect(callback)\n\nConnects to the drone and executes the callback when the drone is ready to fly.\n\n### getVideoStream()\n\nReturns a stream of h.264 frames.\n\n### getMjpegStream()\n\nReturns a stream of mjpeg images.\n\n### takePicture()\n\nTakes a picture and saves the image to the internal storage.\n\n### startRecording()\n\nStarts recording video to the internal storage.\n\n### stopRecording()\n\nStops a previously started recording and saves to internal storage.\n\n#### takeOff(callback)\n\nTell the drone to lift off the ground. Executes the callback when the drone is in the air.\n\n#### land(callback)\n\nLand the drone. Executes the callback when the drone is on the ground.\n\n#### stop()\n\nTell the drone to hover in place.\n\n#### emergency()\n\nTell the drone to drop like a stone.\n\n#### up(val)\n\nCause the drone to increase in altitude at 0-100 speed\n\n#### down(val)\n\nCause the drone to decrease in altitude at 0-100 speed\n\n#### right(val)\n\nCause the drone to move to the right at 0-100 speed\n\n#### left(val)\n\nCause the drone to move to the left at 0-100 speed\n\n#### forward(val)\n\nCause the drone to move forward at 0-100 speed\n\n#### backward(val)\n\nCause the drone to move backward at 0-100 speed\n\n#### clockwise(val)\n\nCause the drone to spin in a clockwise direction at 0-100 speed\n\n#### counterClockwise(val)\n\nCause the drone to spin in a counter clockwise direction at 0-100 speed\n\n#### frontFlip()\n\nTell the drone to do a front flip\n\n#### backFlip()\n\nTell the drone to do a back flip\n\n#### rightFlip()\n\nTell the drone to do a flip to the right \n\n#### leftFlip()\n\nTell the drone to do a flip to the left\n\n\n#### Piloting.flatTrim()\n\nDo a flat trim\n\n#### Piloting.takeOff()\n\nAsk the drone to take off\n\n#### Piloting.pcmd(obj)\n\nAsk the drone to move around.\n\n* **flag** Boolean flag to activate roll/pitch movement\n* **roll** Roll consign for the drone [-100;100]\n* **pitch** Pitch consign for the drone [-100;100]\n* **yaw** Yaw consign for the drone [-100;100]\n* **gaz** Gaz consign for the drone [-100;100]\n* **psi** [NOT USED] - Magnetic north heading of the controlling device (deg) [-180;180]\n\n#### Piloting.landing()\n\nAsk the drone to land\n\n#### Piloting.emergency()\n\nPut drone in emergency user state\n\n#### Piloting.navigateHome(start)\n\nAsk the drone to fly to home\n\n* **start** 1 to start the navigate home, 0 to stop it\n\n#### Piloting.autoTakeOffMode(state)\n\n[NOT USED] Set Drone3 in automatic take off mode\n\n* **state** State of automatic take off mode (1 for autotake off enabled)\n\n#### Piloting.moveBy(obj)\n\nDraft: this command is not implemented yet by the firmware Move the drone to a relative position and rotate heading by a given angle The frame is horizontal and relative to the current drone orientation: - X is front - Y is right - Z is down The movement settings of the device are those set for the autonomous flight.\n\n* **dX** Wanted displacement along the front axis [m]\n* **dY** Wanted displacement along the right axis [m]\n* **dZ** Wanted displacement along the down axis [m]\n* **dPsi** Wanted rotation of heading  [rad]\n\n#### Animations.flip(direction)\n\nMake a flip\n\n* **direction** Direction for the flip\n\n#### Camera.orientation(obj)\n\nAsk the drone to move camera.\n\n* **tilt** Tilt camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.\n* **pan** Pan camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.\n\n#### MediaRecord.picture(mass_storage_id)\n\n@deprecated Take picture\n\n* **mass_storage_id** Mass storage id to take picture\n\n#### MediaRecord.video(obj)\n\n@deprecated Video record\n\n* **record** Command to record video\n* **mass_storage_id** Mass storage id to record\n\n#### MediaRecord.pictureV2()\n\nTake picture\n\n#### MediaRecord.videoV2(record)\n\nVideo record\n\n* **record** Command to record video\n\n#### PilotingEvent.moveByEnd(obj)\n\nDraft: this command is not implemented yet by the firmware End of relative displacement of the drone The frame is horizontal and relative to the current drone orientation: - X is front - Y is right - Z is down\n\n* **dX** Distance traveled along the front axis [m]\n* **dY** Distance traveled along the right axis [m]\n* **dZ** Distance traveled along the down axis [m]\n* **dPsi** Applied angle on heading  [rad]\n* **error** Error to explain the event\n\n#### Network.wifiScan(band)\n\nLaunches wifi network scan\n\n* **band** The band(s) : 2.4 Ghz, 5 Ghz, or both\n\n#### Network.wifiAuthChannel()\n\nController inquire the list of authorized wifi channels.\n\n#### PilotingSettings.maxAltitude(current)\n\nSet Max Altitude\n\n* **current** Current altitude max in m\n\n#### PilotingSettings.maxTilt(current)\n\nSet Max Tilt\n\n* **current** Current tilt max in degree\n\n#### PilotingSettings.absolutControl(on)\n\n[NOT USED] Enable/Disable absolut control\n\n* **on** 1 to enable, 0 to disable\n\n#### PilotingSettings.maxDistance(value)\n\nSet the distance max of the drone\n\n* **value** Current max distance in meter\n\n#### PilotingSettings.noFlyOverMaxDistance(shouldNotFlyOver)\n\nIndication about how the product handle flying over the max distance limitation\n\n* **shouldNotFlyOver** 1 if the drone can't fly further than max distance, 0 if no limitation on the drone should be done\n\n#### PilotingSettings.setAutonomousFlightMaxHorizontalSpeed(value)\n\nDraft: this command is not implemented yet by the firmware Set the maximum horizontal speed used by the autonomous flight\n\n* **value** maximum horizontal speed [m/s]\n\n#### PilotingSettings.setAutonomousFlightMaxVerticalSpeed(value)\n\nDraft: this command is not implemented yet by the firmware Set the maximum vertical speed used by the autonomous flight\n\n* **value** maximum vertical speed [m/s]\n\n#### PilotingSettings.setAutonomousFlightMaxHorizontalAcceleration(value)\n\nDraft: this command is not implemented yet by the firmware Set the maximum horizontal acceleration used by the autonomous flight\n\n* **value** maximum horizontal acceleration [m/s2]\n\n#### PilotingSettings.setAutonomousFlightMaxVerticalAcceleration(value)\n\nDraft: this command is not implemented yet by the firmware Set the maximum vertical acceleration used by the autonomous flight\n\n* **value** maximum vertical acceleration [m/s2]\n\n#### PilotingSettings.setAutonomousFlightMaxRotationSpeed(value)\n\nDraft: this command is not implemented yet by the firmware Set the maximum yaw rotation speed used by the autonomous flight\n\n* **value** maximum yaw rotation speed [rad/s]\n\n#### PilotingSettingsState.autonomousFlightMaxHorizontalSpeed(value)\n\nDraft: this command is not implemented yet by the firmware Maximum horizontal speed used by the autonomous flight\n\n* **value** maximum horizontal speed [m/s]\n\n#### PilotingSettingsState.autonomousFlightMaxVerticalSpeed(value)\n\nDraft: this command is not implemented yet by the firmware Maximum vertical speed used by the autonomous flight\n\n* **value** maximum vertical speed [m/s]\n\n#### PilotingSettingsState.autonomousFlightMaxHorizontalAcceleration(value)\n\nDraft: this command is not implemented yet by the firmware Maximum horizontal acceleration used by the autonomous flight\n\n* **value** maximum horizontal acceleration [m/s2]\n\n#### PilotingSettingsState.autonomousFlightMaxVerticalAcceleration(value)\n\nDraft: this command is not implemented yet by the firmware Maximum vertical acceleration used by the autonomous flight\n\n* **value** maximum vertical acceleration [m/s2]\n\n#### PilotingSettingsState.autonomousFlightMaxRotationSpeed(value)\n\nDraft: this command is not implemented yet by the firmware Maximum yaw rotation speed used by the autonomous flight\n\n* **value** maximum yaw rotation speed [rad/s]\n\n#### SpeedSettings.maxVerticalSpeed(current)\n\nSet Max Vertical speed\n\n* **current** Current max vertical speed in m/s\n\n#### SpeedSettings.maxRotationSpeed(current)\n\nSet Max Rotation speed\n\n* **current** Current max rotation speed in degree/s\n\n#### SpeedSettings.hullProtection(present)\n\nPresence of hull protection\n\n* **present** 1 if present, 0 if not present\n\n#### SpeedSettings.outdoor(outdoor)\n\nOutdoor property\n\n* **outdoor** 1 if outdoor flight, 0 if indoor flight\n\n#### NetworkSettings.wifiSelection(obj)\n\nAuto-select channel of choosen band\n\n* **type** The type of wifi selection (auto, manual)\n* **band** The allowed band(s) : 2.4 Ghz, 5 Ghz, or all\n* **channel** The channel (not used in auto mode)\n\n#### SettingsState.p7id(serialID)\n\nProduct P7ID\n\n* **serialID** Product P7ID\n\n#### PictureSettings.pictureFormatSelection(type)\n\nThe format of the photo\n\n* **type** The type of photo format\n\n#### PictureSettings.autoWhiteBalanceSelection(type)\n\nAutoWhiteBalance mode\n\n* **type** The type auto white balance\n\n#### PictureSettings.expositionSelection(value)\n\nThe exposition of the image\n\n* **value** Exposition value (bounds given by ExpositionChanged arg min and max, by default [-3:3])\n\n#### PictureSettings.saturationSelection(value)\n\nThe saturation of the image\n\n* **value** Saturation value (bounds given by SaturationChanged arg min and max, by default [-100:100])\n\n#### PictureSettings.timelapseSelection(obj)\n\nPicture taken periodically\n\n* **enabled** 1 if timelapse is enabled, 0 otherwise\n* **interval** interval in seconds for taking pictures\n\n#### PictureSettings.videoAutorecordSelection(obj)\n\nVideo autorecord\n\n* **enabled** 1 if video autorecord is enabled, 0 otherwise\n* **mass_storage_id** Mass storage id to take video\n\n#### MediaStreaming.videoEnable(enable)\n\nEnable/disable video streaming.\n\n* **enable** 1 to enable, 0 to disable.\n\n#### GPSSettings.setHome(obj)\n\nSet home location\n\n* **latitude** Home latitude in decimal degrees\n* **longitude** Home longitude in decimal degrees\n* **altitude** Home altitude in meters\n\n#### GPSSettings.resetHome()\n\nReset home location and let the drone make its own home\n\n#### GPSSettings.sendControllerGPS(obj)\n\nsend controller GPS location\n\n* **latitude** GPS latitude in decimal degrees\n* **longitude** GPS longitude in decimal degrees\n* **altitude** GPS altitude in meters\n* **horizontalAccuracy** Horizontal Accuracy in meter ; equal -1 if no horizontal Accuracy\n* **verticalAccuracy** Vertical Accuracy in meter ; equal -1 if no vertical Accuracy\n\n#### GPSSettings.homeType(type)\n\nSet user preference for the type of the home position. Note that this is only a preference\n\n* **type** The type of the home position\n\n#### GPSSettings.returnHomeDelay(delay)\n\nSet the delay after which the drone will automatically try to return home\n\n* **delay** Delay in second\n\n#### CameraState.orientation(obj)\n\nCamera orientation\n\n* **tilt** Tilt camera consign for the drone [-100;100]\n* **pan** Pan camera consign for the drone [-100;100]\n\n#### CameraState.defaultCameraOrientation(obj)\n\nOrientation of the camera center. This is the value to send when we want to center the camera.\n\n* **tilt** Tilt value (in degree)\n* **pan** Pan value (in degree)\n\n#### Antiflickering.electricFrequency(frequency)\n\nElectric frequency of the country determined by the position of the controller\n\n* **frequency** Type of the electric frequency\n\n#### Antiflickering.setMode(mode)\n\nSet the anti flickering mode\n\n* **mode** Mode of the anti flickering functionnality\n\n#### PROState.features(features)\n\nFeatures enabled\n\n* **features** \t\t  Bitfield representing enabled features. \t\t  Currently supported bits are: \t\t  - 0 : 720p streaming \t\t  - 1 : No interface on SkyController HDMI\n\n#### Network.disconnect()\n\nSignals the remote that the host will disconnect and close its libARNetwork instance (and all threads that use libARNetwork)\n\n#### NetworkEvent.disconnection(cause)\n\nSignals the remote that the host will disconnect and close its libARNetwork instance (and all threads that use libARNetwork)\n\n* **cause** Cause of the disconnection of the product\n\n#### Settings.allSettings()\n\nGet all product settings, the product must send all settings\n\n#### Settings.reset()\n\nReset all settings\n\n#### Settings.productName(name)\n\nSet Product name\n\n* **name** Product name\n\n#### Settings.country(code)\n\nSet current Country of controller\n\n* **code** Country code with ISO 3166 format\n\n#### Settings.autoCountry(automatic)\n\nSet Auto Country Settings\n\n* **automatic** Boolean : 0 : Manual / 1 : Auto\n\n#### Common.allStates()\n\nGet all product states.\n\n#### Common.currentDate(date)\n\nSet current date of controller\n\n* **date** Date with ISO-8601 format\n\n#### Common.currentTime(time)\n\nSet current time of controller\n\n* **time** Time with ISO-8601 format\n\n#### Common.reboot()\n\nCommand to ask reboot to product\n\n#### CommonState.productModel(model)\n\nInform of the product model. This is used to customize the UI depending on the connected product.\n\n* **model** The Model of the product.\n\n#### CommonState.countryListKnown(obj)\n\nList of the countries known by the device\n\n* **listFlags** List entry attribute Bitfield. 0x01: First: indicate it's the first element of the list.  0x02: Last:  indicate it's the last element of the list. 0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.\n* **countryCodes** Following of country code with ISO 3166 format, separated by \";\". Be careful of the command size allowed by the network used. If necessary, split the list in several commands.\n\n#### OverHeat.switchOff()\n\n@deprecated Switch off the drone when a overheat appeared\n\n#### OverHeat.ventilate()\n\n@deprecated Ventilate the drone when a overheat appeared\n\n#### WifiSettings.outdoorSetting(outdoor)\n\nSend to product if it should use its outdoor wifi config, or indoor\n\n* **outdoor** 1 if it should use outdoor wifi settings, 0 otherwise\n\n#### Mavlink.start(obj)\n\nStart the flight plan\n\n* **filepath** flight plan file path from the mavlink ftp root\n* **type** type of the played mavlink file\n\n#### Mavlink.pause()\n\nPause the flightplan (can be restarted with a start)\n\n#### Mavlink.stop()\n\nStop the flightplan\n\n#### Calibration.magnetoCalibration(calibrate)\n\nSent when a calibration of the magnetometer is asked or is aborted\n\n* **calibrate** 1 if the calibration should be started, 0 if it should be aborted\n\n#### CalibrationState.magnetoCalibrationRequiredState(required)\n\nStatus of the calibration requirement\n\n* **required** 1 if calibration is required, 0 if current calibration is still valid\n\n#### GPS.controllerPositionForRun(obj)\n\nSet the controller position for a run. This command is used by all non gps products. Watch out, this command cannot be used with BLE products\n\n* **latitude** Controller latitude in decimal degrees\n* **longitude** Controller longitude in decimal degrees\n\n#### FlightPlanEvent.startingErrorEvent()\n\nEvent of flight plan start error\n\n#### FlightPlanEvent.speedBridleEvent()\n\nBridle speed of the drone\n\n#### ARLibsVersionsState.controllerLibARCommandsVersion(version)\n\nController libARCommands version\n\n* **version** version of libARCommands (\"1.2.3.4\"format)\n\n#### ARLibsVersionsState.skyControllerLibARCommandsVersion(version)\n\nSkyController libARCommands version\n\n* **version** version of libARCommands (\"1.2.3.4\"format)\n\n#### ARLibsVersionsState.deviceLibARCommandsVersion(version)\n\nDevice libARCommands version\n\n* **version** version of libARCommands (\"1.2.3.4\"format)\n\n#### Audio.controllerReadyForStreaming(ready)\n\nTell the firmware whether the controller is ready to start audio streaming.\n\n* **ready** Bit field for TX and RX ready. bit 0 is 1 if controller is ready and wants to receive sound (Drone TX) bit 1 is 1 if controller is ready and wants to send sound (Drone RX)\n\n#### AudioState.audioStreamingRunning(running)\n\nNotify the controller whether the audio streaming is running.\n\n* **running** Bit field for TX and RX running bit 0 is 1 if Drone TX is running bit 1 is 1 if Drone RX is running\n\n#### Headlights.intensity(obj)\n\nSet instensity of lighting LEDs.\n\n* **left** Set the left LED intensity value (0 through 255).\n* **right** Set the right LED intensity value (0 through 255).\n\n#### Animations.startAnimation(anim)\n\nStart a paramaterless animation.\n\n* **anim** Animation to start.\n\n#### Animations.stopAnimation(anim)\n\nStop a running animation.\n\n* **anim** Animation to stop.\n\n#### Animations.stopAllAnimations()\n\nStop all running animations.\n\n#### AnimationsState.list(obj)\n\nList of animations state.\n\n* **anim** Animation type.\n* **state** State of the animation\n* **error** Error to explain the state\n\n#### Accessory.config(accessory)\n\nSet the current accessory configuration.\n\n* **accessory** Accessory configuration to set.\n\n#### AccessoryState.accessoryConfigModificationEnabled(enabled)\n\nPossibility to modify the accessory configuration.\n\n* **enabled** 1 if the modification of the accessory Config is enabled, 0 otherwise\n\n#### Charger.setMaxChargeRate(rate)\n\n@deprecated Set the maximum charge rate allowed to charge a battery.\n\n* **rate** The new maximum charge rate.\n\n#### ChargerState.chargingInfo(obj)\n\nInformation of the charge.\n\n* **phase** The current charging phase.\n* **rate** The charge rate. If phase is DISCHARGING, refers to the last charge.\n* **intensity** The charging intensity, in dA. (12dA = 1,2A) ; If phase is DISCHARGING, refers to the last charge. Equals to 0 if not known.\n* **fullChargingTime** The full charging time estimated, in minute. If phase is DISCHARGING, refers to the last charge. Equals to 0 if not known.\n\n\n### Events\n#### battery\n\nEmits battery level percentage\n\n#### video\n\nEmits one h.264 video frame\n\n#### ready\n\nEmitted when the drone has successfully connected\n\n#### flying\n\nEmmited when the drone is flying in the air.\n\n#### hovering\n\nEmmited when the drone is hovering in the air.\n\n#### landed\n\nEmmited when the drone has landed on the ground.\n\n#### landing\n\nEmmited when the drone is in the process of landing.\n\n#### takingOff\n\nEmmited when the drone is in the process of taking off.\n\n#### emergency\n\nEmmited when the drone encounters an emergency condition.\n\n\n### Raw Events\n#### PictureStateChanged\n\n@deprecated State of picture recording\n\n#### VideoStateChanged\n\n@deprecated State of video recording\n\n#### PictureStateChangedV2\n\nState of device picture recording changed\n\n#### VideoStateChangedV2\n\nState of device video recording changed\n\n#### PictureEventChanged\n\nEvent of picture recording\n\n#### VideoEventChanged\n\nEvent of video recording\n\n#### FlatTrimChanged\n\nDrone acknowledges that flat trim was correctly processed\n\n#### FlyingStateChanged\n\nDrone flying state changed\n\n#### AlertStateChanged\n\nDrone alert state changed\n\n#### NavigateHomeStateChanged\n\nNavigating home state\n\n#### PositionChanged\n\nDrone position changed\n\n#### SpeedChanged\n\nDrone speed changed\n\n#### AttitudeChanged\n\nDrone attitude changed\n\n#### AutoTakeOffModeChanged\n\nStatus of the drone3 automatic take off mode\n\n#### AltitudeChanged\n\nDrone altitude changed\n\n#### WifiScanListChanged\n\nOne scanning result found\n\n#### AllWifiScanChanged\n\nState sent when all scanning result sent\n\n#### WifiAuthChannelListChanged\n\nNotify of an Authorized Channel.\n\n#### AllWifiAuthChannelChanged\n\nNotify the end of the list of Authorized wifi Channel.\n\n#### MaxAltitudeChanged\n\nMax Altitude sent by product\n\n#### MaxTiltChanged\n\nMax tilt sent by product\n\n#### AbsolutControlChanged\n\nAbsolut control boolean sent by product\n\n#### MaxDistanceChanged\n\nMax distance sent by the drone\n\n#### NoFlyOverMaxDistanceChanged\n\nIndication about how the product handle flying over the max distance limitation\n\n#### AutonomousFlightMaxHorizontalSpeed\n\nDraft: this command is not implemented yet by the firmware Maximum horizontal speed used by the autonomous flight\n\n#### AutonomousFlightMaxVerticalSpeed\n\nDraft: this command is not implemented yet by the firmware Maximum vertical speed used by the autonomous flight\n\n#### AutonomousFlightMaxHorizontalAcceleration\n\nDraft: this command is not implemented yet by the firmware Maximum horizontal acceleration used by the autonomous flight\n\n#### AutonomousFlightMaxVerticalAcceleration\n\nDraft: this command is not implemented yet by the firmware Maximum vertical acceleration used by the autonomous flight\n\n#### AutonomousFlightMaxRotationSpeed\n\nDraft: this command is not implemented yet by the firmware Maximum yaw rotation speed used by the autonomous flight\n\n#### MaxVerticalSpeedChanged\n\nMax vertical speed sent by product\n\n#### MaxRotationSpeedChanged\n\nMax rotation speed sent by product\n\n#### HullProtectionChanged\n\nPresence of hull protection sent by product\n\n#### OutdoorChanged\n\nOutdoor property sent by product\n\n#### WifiSelectionChanged\n\nWifi selection from product\n\n#### ProductMotorVersionListChanged\n\nDEPRECATED Product Motor version (the first argument is the unique identifier for the list)\n\n#### ProductGPSVersionChanged\n\nProduct GPS versions\n\n#### MotorErrorStateChanged\n\nMotor status changed\n\n#### MotorSoftwareVersionChanged\n\nMotor software version status\n\n#### MotorFlightsStatusChanged\n\nMotor flights status\n\n#### MotorErrorLastErrorChanged\n\nMotor status about last error\n\n#### PictureFormatChanged\n\nThe format of the photo\n\n#### AutoWhiteBalanceChanged\n\nAutoWhiteBalance mode\n\n#### ExpositionChanged\n\nThe exposition of the image\n\n#### SaturationChanged\n\nThe saturation of the image\n\n#### TimelapseChanged\n\nPicture taken periodically\n\n#### VideoAutorecordChanged\n\nVideo autorecord\n\n#### VideoEnableChanged\n\nReturn video streaming status.\n\n#### HomeChanged\n\nReturn home status\n\n#### ResetHomeChanged\n\nReset home status\n\n#### GPSFixStateChanged\n\nGPS fix state\n\n#### GPSUpdateStateChanged\n\nGPS update state\n\n#### HomeTypeChanged\n\nState of the type of the home position. This type is the user preference. The prefered home type may not be available, see HomeTypeStatesChanged to get the drone home type.\n\n#### ReturnHomeDelayChanged\n\nState of the delay after which the drone will automatically try to return home\n\n#### Orientation\n\nCamera orientation\n\n#### defaultCameraOrientation\n\nOrientation of the camera center. This is the value to send when we want to center the camera.\n\n#### electricFrequencyChanged\n\nElectric frequency of the country determined by the position of the controller\n\n#### modeChanged\n\nAnti flickering mode\n\n#### NumberOfSatelliteChanged\n\nThe number of satellite used to compute the gps position\n\n#### HomeTypeAvailabilityChanged\n\nAvailability of the return home types in a map : for each type other args will be sent by the drone\n\n#### HomeTypeChosenChanged\n\nThe return home type chosen\n\n#### Features\n\nFeatures enabled \t\t  \t\n\n#### Disconnection\n\nSignals the remote that the host will disconnect and close its libARNetwork instance (and all threads that use libARNetwork)\n\n#### AllSettingsChanged\n\nState sent when all settings has been sent.\n\n#### ResetChanged\n\nState sent when all settings has been resetting.\n\n#### ProductNameChanged\n\nProduct name\n\n#### ProductVersionChanged\n\nProduct versions\n\n#### ProductSerialHighChanged\n\nProduct serial number\n\n#### ProductSerialLowChanged\n\nProduct serial number\n\n#### CountryChanged\n\nInform current Country set in product. (Answer to 'Country' command)\n\n#### AutoCountryChanged\n\nInform Auto Country Settings\n\n#### AllStates\n\nGet all product states.\n\n#### AllStatesChanged\n\nState sent when all product states has been sent.\n\n#### BatteryStateChanged\n\nBattery state\n\n#### MassStorageStateListChanged\n\nMass storage state list\n\n#### MassStorageInfoStateListChanged\n\nMass storage info state list\n\n#### CurrentDateChanged\n\nCurrent date state\n\n#### CurrentTimeChanged\n\nCurrent time state\n\n#### MassStorageInfoRemainingListChanged\n\nMass storage info remaining list\n\n#### WifiSignalChanged\n\nWifi Signal between controller and product state\n\n#### SensorsStatesListChanged\n\nSensors states list\n\n#### ProductModel\n\nInform of the product model. This is used to customize the UI depending on the connected product.\n\n#### CountryListKnown\n\nList of the countries known by the device\n\n#### OverHeatChanged\n\nOverheat temperature reached\n\n#### OverHeatRegulationChanged\n\nOverheat regulation state changed\n\n#### isPilotingChanged\n\nTell the device when the controller application enters/leaves the piloting HUD.\n\n#### outdoorSettingsChanged\n\nStatus of the wifi config : either indoor or outdoor\n\n#### MavlinkFilePlayingStateChanged\n\nPlaying state of a mavlink flight plan\n\n#### MavlinkPlayErrorStateChanged\n\nFlightPlan play state error\n\n#### MagnetoCalibrationStateChanged\n\nSent when the state of the magneto calibration has changed\n\n#### MagnetoCalibrationRequiredState\n\nStatus of the calibration requirement\n\n#### MagnetoCalibrationAxisToCalibrateChanged\n\nEvent sent by a product to inform about the axis to calibrate\n\n#### MagnetoCalibrationStartedChanged\n\nStatus of the calibration process\n\n#### CameraSettingsChanged\n\nStatus of the camera settings\n\n#### AvailabilityStateChanged\n\nState of availability to run a flight plan file\n\n#### ComponentStateListChanged\n\nList of state of drone flightPlan components\n\n#### StartingErrorEvent\n\nEvent of flight plan start error\n\n#### SpeedBridleEvent\n\nBridle speed of the drone\n\n#### ControllerLibARCommandsVersion\n\nController libARCommands version\n\n#### SkyControllerLibARCommandsVersion\n\nSkyController libARCommands version\n\n#### DeviceLibARCommandsVersion\n\nDevice libARCommands version\n\n#### AudioStreamingRunning\n\nNotify the controller whether the audio streaming is running.\n\n#### intensityChanged\n\nNotify the instensity values for headlight LEDs.\n\n#### SupportedAccessoriesListChanged\n\nList of supported accessories\n\n#### AccessoryConfigChanged\n\nAccessory config response.\n\n#### AccessoryConfigModificationEnabled\n\nPossibility to modify the accessory configuration.\n\n#### MaxChargeRateChanged\n\n@deprecated The maximum charge rate reported by the firmware.\n\n#### CurrentChargeStateChanged\n\n@deprecated The charge status of the battery changed.\n\n#### LastChargeRateChanged\n\n@deprecated The charge rate of the last charge sent by the firmware.\n\n#### ChargingInfo\n\nInformation of the charge.\n\n\n## Release History\n\n0.3.0 Add getVideoStream, getMjpegStream, picture taking and video recording methods\n\n0.2.0 Add flip commands, implement ack processes, emit flying state and battery events\n\n0.1.0 Initial release\n\n## License\n\nCopyright (c) 2015 The Hybrid Group. Licensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/hybridgroup/node-bebop.git"
  },
  "scripts": {
    "test": "mocha",
    "updateCommands": "node updateCommands.js"
  },
  "version": "0.3.0"
}
